
colour_sensor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015b  008000ae  008000ae  0000063e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000162  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b5  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b3  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000598  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022c  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 30       	cpi	r26, 0x09	; 9
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  8a:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a6:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  a8:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  aa:	e0 91 06 02 	lds	r30, 0x0206
  ae:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  b0:	80 91 07 02 	lds	r24, 0x0207
  b4:	e8 17       	cp	r30, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_11+0x2a>
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 c0       	rjmp	.+16     	; 0xcc <__vector_11+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  bc:	89 2f       	mov	r24, r25
  be:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  c0:	e0 93 06 02 	sts	0x0206, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ec 5f       	subi	r30, 0xFC	; 252
  c8:	fe 4f       	sbci	r31, 0xFE	; 254
  ca:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  cc:	80 93 08 02 	sts	0x0208, r24
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f6:	90 91 04 02 	lds	r25, 0x0204
  fa:	80 91 05 02 	lds	r24, 0x0205
  fe:	98 17       	cp	r25, r24
 100:	61 f0       	breq	.+24     	; 0x11a <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 102:	e0 91 05 02 	lds	r30, 0x0205
 106:	ef 5f       	subi	r30, 0xFF	; 255
 108:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 10a:	e0 93 05 02 	sts	0x0205, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ec 51       	subi	r30, 0x1C	; 28
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	8c b9       	out	0x0c, r24	; 12
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 11a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
 12e:	10 92 06 02 	sts	0x0206, r1
    UART_RxTail = 0;
 132:	10 92 07 02 	sts	0x0207, r1
}
 136:	08 95       	ret

00000138 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 138:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 13a:	10 92 04 02 	sts	0x0204, r1
    UART_TxTail = 0;
 13e:	10 92 05 02 	sts	0x0205, r1
    UART_RxHead = 0;
 142:	10 92 06 02 	sts	0x0206, r1
    UART_RxTail = 0;
 146:	10 92 07 02 	sts	0x0207, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 14a:	97 ff       	sbrs	r25, 7
 14c:	03 c0       	rjmp	.+6      	; 0x154 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 152:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 154:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 156:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 160:	08 95       	ret

00000162 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 162:	90 91 06 02 	lds	r25, 0x0206
 166:	80 91 07 02 	lds	r24, 0x0207
 16a:	98 17       	cp	r25, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <uart_getc+0x12>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	31 e0       	ldi	r19, 0x01	; 1
 172:	11 c0       	rjmp	.+34     	; 0x196 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 174:	e0 91 07 02 	lds	r30, 0x0207
 178:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 17a:	e0 93 07 02 	sts	0x0207, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 5f       	subi	r30, 0xFC	; 252
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 186:	20 91 08 02 	lds	r18, 0x0208
 18a:	92 2f       	mov	r25, r18
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	43 0f       	add	r20, r19
 192:	51 1d       	adc	r21, r1
 194:	9a 01       	movw	r18, r20

}/* uart_getc */
 196:	c9 01       	movw	r24, r18
 198:	08 95       	ret

0000019a <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19e:	8c b9       	out	0x0c, r24	; 12
}
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1a6:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 1a8:	08 95       	ret

000001aa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1aa:	fc 01       	movw	r30, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 1b2:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1b4:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	c9 f7       	brne	.-14     	; 0x1ae <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 1bc:	08 95       	ret

000001be <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1c4:	2c b9       	out	0x0c, r18	; 12
 1c6:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	24 91       	lpm	r18, Z+
 1cc:	22 23       	and	r18, r18
 1ce:	c1 f7       	brne	.-16     	; 0x1c0 <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 1d0:	08 95       	ret

000001d2 <setup>:
volatile char str[10]={0},str1[10]={0},str2[10]={0},buff[10]={0};


void setup()
{
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 1d2:	8f e5       	ldi	r24, 0x5F	; 95
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 9c 00 	call	0x138	; 0x138 <uart_init>
	sei();
 1da:	78 94       	sei
	uart_puts("start");	
 1dc:	80 e6       	ldi	r24, 0x60	; 96
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	DDRC=0xff;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 bb       	out	0x14, r24	; 20
	sbi(DDRA,0);  //s0
 1e8:	d0 9a       	sbi	0x1a, 0	; 26
	sbi(DDRA,1);  //s1
 1ea:	d1 9a       	sbi	0x1a, 1	; 26
	sbi(DDRA,2);  //s2
 1ec:	d2 9a       	sbi	0x1a, 2	; 26
	sbi(DDRA,3);  //s3
 1ee:	d3 9a       	sbi	0x1a, 3	; 26
	sbi(DDRA,5);  //OUTPUT ENABLE
 1f0:	d5 9a       	sbi	0x1a, 5	; 26
	
	cbi(DDRD,2);  //external interrupt
 1f2:	8a 98       	cbi	0x11, 2	; 17

	sbi(PORTA,0); //S0=0 S1=1
 1f4:	d8 9a       	sbi	0x1b, 0	; 27
	cbi(PORTA,1);  //2% frequency scaling
 1f6:	d9 98       	cbi	0x1b, 1	; 27
	
	cbi(PORTA,5); //enable to low	
 1f8:	dd 98       	cbi	0x1b, 5	; 27
}
 1fa:	08 95       	ret

000001fc <interrupt_init>:
 
 void interrupt_init()
{
	cli();	  
 1fc:	f8 94       	cli
	GICR=(1<<INT0);	 
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0x01; //logic change
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	85 bf       	out	0x35, r24	; 53
	sei();
 206:	78 94       	sei
	//uart_puts("\n ext. int_init");
}
 208:	08 95       	ret

0000020a <timer0_init>:
void timer0_init(void)
{
	  TCCR0= (1<<CS02);//prescalor 256
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	83 bf       	out	0x33, r24	; 51
	 
	  TCNT0=75; // delay of 4 ms for frequency of 7372800
 20e:	8b e4       	ldi	r24, 0x4B	; 75
 210:	82 bf       	out	0x32, r24	; 50
	  TIMSK |= (1<<TOIE0); //allow interrupt
 212:	89 b7       	in	r24, 0x39	; 57
 214:	81 60       	ori	r24, 0x01	; 1
 216:	89 bf       	out	0x39, r24	; 57
	  //uart_puts("\n timer0_init");
}
 218:	08 95       	ret

0000021a <__vector_1>:


ISR (INT0_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
	sbi(PORTC,1);
 228:	a9 9a       	sbi	0x15, 1	; 21
	counter++;
 22a:	80 91 b2 00 	lds	r24, 0x00B2
 22e:	90 91 b3 00 	lds	r25, 0x00B3
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 b3 00 	sts	0x00B3, r25
 238:	80 93 b2 00 	sts	0x00B2, r24
}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <main>:
}


 void main()
 {
	setup();
 24a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setup>
 24e:	88 e8       	ldi	r24, 0x88	; 136
 250:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 252:	20 e7       	ldi	r18, 0x70	; 112
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	f9 01       	movw	r30, r18
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25e:	d9 f7       	brne	.-10     	; 0x256 <main+0xc>
	cbi(PORTA,5); //enable to low	
}
 
 void interrupt_init()
{
	cli();	  
 260:	f8 94       	cli
	GICR=(1<<INT0);	 
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0x01; //logic change
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	85 bf       	out	0x35, r24	; 53
	sei();
 26a:	78 94       	sei
	//uart_puts("\n ext. int_init");
}
void timer0_init(void)
{
	  TCCR0= (1<<CS02);//prescalor 256
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	83 bf       	out	0x33, r24	; 51
	 
	  TCNT0=75; // delay of 4 ms for frequency of 7372800
 270:	8b e4       	ldi	r24, 0x4B	; 75
 272:	82 bf       	out	0x32, r24	; 50
	  TIMSK |= (1<<TOIE0); //allow interrupt
 274:	89 b7       	in	r24, 0x39	; 57
 276:	81 60       	ori	r24, 0x01	; 1
 278:	89 bf       	out	0x39, r24	; 57
	timer0_init();
	
	while(1)
	{						
			
			if(flag_count==1)
 27a:	80 91 b0 00 	lds	r24, 0x00B0
 27e:	90 91 b1 00 	lds	r25, 0x00B1
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	d1 f7       	brne	.-12     	; 0x27a <main+0x30>
		{
		 
			if((countR>countG)&&(countR>countB))
 286:	20 91 b4 00 	lds	r18, 0x00B4
 28a:	30 91 b5 00 	lds	r19, 0x00B5
 28e:	80 91 b6 00 	lds	r24, 0x00B6
 292:	90 91 b7 00 	lds	r25, 0x00B7
 296:	82 17       	cp	r24, r18
 298:	93 07       	cpc	r25, r19
 29a:	74 f4       	brge	.+28     	; 0x2b8 <main+0x6e>
 29c:	20 91 b4 00 	lds	r18, 0x00B4
 2a0:	30 91 b5 00 	lds	r19, 0x00B5
 2a4:	80 91 b8 00 	lds	r24, 0x00B8
 2a8:	90 91 b9 00 	lds	r25, 0x00B9
 2ac:	82 17       	cp	r24, r18
 2ae:	93 07       	cpc	r25, r19
 2b0:	1c f4       	brge	.+6      	; 0x2b8 <main+0x6e>
				{
					uart_puts("\n\rfind_red");  
 2b2:	86 e6       	ldi	r24, 0x66	; 102
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	34 c0       	rjmp	.+104    	; 0x320 <main+0xd6>
				}
				else 
				if((countG>countR)&&(countG>countB))
 2b8:	20 91 b6 00 	lds	r18, 0x00B6
 2bc:	30 91 b7 00 	lds	r19, 0x00B7
 2c0:	80 91 b4 00 	lds	r24, 0x00B4
 2c4:	90 91 b5 00 	lds	r25, 0x00B5
 2c8:	82 17       	cp	r24, r18
 2ca:	93 07       	cpc	r25, r19
 2cc:	74 f4       	brge	.+28     	; 0x2ea <main+0xa0>
 2ce:	20 91 b6 00 	lds	r18, 0x00B6
 2d2:	30 91 b7 00 	lds	r19, 0x00B7
 2d6:	80 91 b8 00 	lds	r24, 0x00B8
 2da:	90 91 b9 00 	lds	r25, 0x00B9
 2de:	82 17       	cp	r24, r18
 2e0:	93 07       	cpc	r25, r19
 2e2:	1c f4       	brge	.+6      	; 0x2ea <main+0xa0>
				{
				  uart_puts("\n\r find_green");	 
 2e4:	81 e7       	ldi	r24, 0x71	; 113
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <main+0xd6>
				} 
				else 
				if((countB>countG)&&(countB>countR))
 2ea:	20 91 b8 00 	lds	r18, 0x00B8
 2ee:	30 91 b9 00 	lds	r19, 0x00B9
 2f2:	80 91 b6 00 	lds	r24, 0x00B6
 2f6:	90 91 b7 00 	lds	r25, 0x00B7
 2fa:	82 17       	cp	r24, r18
 2fc:	93 07       	cpc	r25, r19
 2fe:	74 f4       	brge	.+28     	; 0x31c <main+0xd2>
 300:	20 91 b8 00 	lds	r18, 0x00B8
 304:	30 91 b9 00 	lds	r19, 0x00B9
 308:	80 91 b4 00 	lds	r24, 0x00B4
 30c:	90 91 b5 00 	lds	r25, 0x00B5
 310:	82 17       	cp	r24, r18
 312:	93 07       	cpc	r25, r19
 314:	1c f4       	brge	.+6      	; 0x31c <main+0xd2>
				{
             	   uart_puts("\n\r find_blue");		 
 316:	8f e7       	ldi	r24, 0x7F	; 127
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <main+0xd6>
				}
			    else 
			    {
					
					uart_puts("NO FIND ");
 31c:	8c e8       	ldi	r24, 0x8C	; 140
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
				}
				flag_count=0;
 324:	10 92 b1 00 	sts	0x00B1, r1
 328:	10 92 b0 00 	sts	0x00B0, r1
 32c:	a6 cf       	rjmp	.-180    	; 0x27a <main+0x30>

0000032e <__vector_9>:
	sbi(PORTC,1);
	counter++;
}

ISR(TIMER0_OVF_vect)//the timer 2, 10ms interrupt overflow again. Internal overflow interrupt executive function
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	
	TCNT0=75;
 350:	8b e4       	ldi	r24, 0x4B	; 75
 352:	82 bf       	out	0x32, r24	; 50
	flag++;
 354:	80 91 ae 00 	lds	r24, 0x00AE
 358:	90 91 af 00 	lds	r25, 0x00AF
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	90 93 af 00 	sts	0x00AF, r25
 362:	80 93 ae 00 	sts	0x00AE, r24
	//uart_puts("flag");
	itoa(flag,buff,10);
 366:	80 91 ae 00 	lds	r24, 0x00AE
 36a:	90 91 af 00 	lds	r25, 0x00AF
 36e:	6a ed       	ldi	r22, 0xDA	; 218
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	4a e0       	ldi	r20, 0x0A	; 10
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	0e 94 67 02 	call	0x4ce	; 0x4ce <itoa>
	
		if(flag==1)
 37a:	80 91 ae 00 	lds	r24, 0x00AE
 37e:	90 91 af 00 	lds	r25, 0x00AF
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	39 f4       	brne	.+14     	; 0x394 <__vector_9+0x66>
		 {
		   counter=0;
 386:	10 92 b3 00 	sts	0x00B3, r1
 38a:	10 92 b2 00 	sts	0x00B2, r1
		   cbi(PORTA,2);//s2         low
 38e:	da 98       	cbi	0x1b, 2	; 27
			cbi(PORTA,3);//s3        low       for getting value of red
 390:	db 98       	cbi	0x1b, 3	; 27
 392:	8c c0       	rjmp	.+280    	; 0x4ac <__stack+0x4d>
		 }
		 
		 else if(flag==100)
 394:	80 91 ae 00 	lds	r24, 0x00AE
 398:	90 91 af 00 	lds	r25, 0x00AF
 39c:	84 36       	cpi	r24, 0x64	; 100
 39e:	91 05       	cpc	r25, r1
 3a0:	e1 f4       	brne	.+56     	; 0x3da <__vector_9+0xac>
		{
			countR =counter;
 3a2:	80 91 b2 00 	lds	r24, 0x00B2
 3a6:	90 91 b3 00 	lds	r25, 0x00B3
 3aa:	90 93 b5 00 	sts	0x00B5, r25
 3ae:	80 93 b4 00 	sts	0x00B4, r24
			uart_puts("\n\rred=");
 3b2:	85 e9       	ldi	r24, 0x95	; 149
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		    itoa(countR,str,10);
 3ba:	80 91 b4 00 	lds	r24, 0x00B4
 3be:	90 91 b5 00 	lds	r25, 0x00B5
 3c2:	6c eb       	ldi	r22, 0xBC	; 188
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	4a e0       	ldi	r20, 0x0A	; 10
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	0e 94 67 02 	call	0x4ce	; 0x4ce <itoa>
		    uart_puts(str);
 3ce:	8c eb       	ldi	r24, 0xBC	; 188
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
			
			cbi(PORTA,2);//s2      low
 3d6:	da 98       	cbi	0x1b, 2	; 27
 3d8:	22 c0       	rjmp	.+68     	; 0x41e <__vector_9+0xf0>
			sbi(PORTA,3); // s3    high     for selecting blue colour
			counter=0;
		}
		 
		 
		 else if(flag==200)
 3da:	80 91 ae 00 	lds	r24, 0x00AE
 3de:	90 91 af 00 	lds	r25, 0x00AF
 3e2:	88 3c       	cpi	r24, 0xC8	; 200
 3e4:	91 05       	cpc	r25, r1
 3e6:	09 f5       	brne	.+66     	; 0x42a <__vector_9+0xfc>
		{
			countB=counter;
 3e8:	80 91 b2 00 	lds	r24, 0x00B2
 3ec:	90 91 b3 00 	lds	r25, 0x00B3
 3f0:	90 93 b9 00 	sts	0x00B9, r25
 3f4:	80 93 b8 00 	sts	0x00B8, r24
			uart_puts("  blue=");
 3f8:	8c e9       	ldi	r24, 0x9C	; 156
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
			itoa(countB,str2,10);
 400:	80 91 b8 00 	lds	r24, 0x00B8
 404:	90 91 b9 00 	lds	r25, 0x00B9
 408:	60 ed       	ldi	r22, 0xD0	; 208
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	4a e0       	ldi	r20, 0x0A	; 10
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	0e 94 67 02 	call	0x4ce	; 0x4ce <itoa>
			uart_puts(str2);
 414:	80 ed       	ldi	r24, 0xD0	; 208
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
			
			sbi(PORTA,2);//s2    high
 41c:	da 9a       	sbi	0x1b, 2	; 27
			sbi(PORTA,3);//s3    high      for selecting green colour
 41e:	db 9a       	sbi	0x1b, 3	; 27
			counter=0;
 420:	10 92 b3 00 	sts	0x00B3, r1
 424:	10 92 b2 00 	sts	0x00B2, r1
 428:	41 c0       	rjmp	.+130    	; 0x4ac <__stack+0x4d>
		}
		 
		 
		else if(flag==300)
 42a:	80 91 ae 00 	lds	r24, 0x00AE
 42e:	90 91 af 00 	lds	r25, 0x00AF
 432:	8c 52       	subi	r24, 0x2C	; 44
 434:	91 40       	sbci	r25, 0x01	; 1
 436:	e9 f4       	brne	.+58     	; 0x472 <__stack+0x13>
		{
			
			countG=counter;
 438:	80 91 b2 00 	lds	r24, 0x00B2
 43c:	90 91 b3 00 	lds	r25, 0x00B3
 440:	90 93 b7 00 	sts	0x00B7, r25
 444:	80 93 b6 00 	sts	0x00B6, r24
			uart_puts("  green=");
 448:	84 ea       	ldi	r24, 0xA4	; 164
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
			itoa(countG,str1,10);
 450:	80 91 b6 00 	lds	r24, 0x00B6
 454:	90 91 b7 00 	lds	r25, 0x00B7
 458:	66 ec       	ldi	r22, 0xC6	; 198
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	4a e0       	ldi	r20, 0x0A	; 10
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	0e 94 67 02 	call	0x4ce	; 0x4ce <itoa>
			uart_puts(str1);
 464:	86 ec       	ldi	r24, 0xC6	; 198
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		    
		    sbi(PORTA,2);//s2   high 
 46c:	da 9a       	sbi	0x1b, 2	; 27
		    cbi(PORTA,3);//s3   low        for selecting no filter 
 46e:	db 98       	cbi	0x1b, 3	; 27
 470:	d7 cf       	rjmp	.-82     	; 0x420 <__vector_9+0xf2>
			counter=0;
			
			//TIMSK = 0x00;
		}
		
		else if(flag==400)
 472:	80 91 ae 00 	lds	r24, 0x00AE
 476:	90 91 af 00 	lds	r25, 0x00AF
 47a:	80 59       	subi	r24, 0x90	; 144
 47c:	91 40       	sbci	r25, 0x01	; 1
 47e:	b1 f4       	brne	.+44     	; 0x4ac <__stack+0x4d>
		{
			flag_count=1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 b1 00 	sts	0x00B1, r25
 488:	80 93 b0 00 	sts	0x00B0, r24
			
			countW=counter;
 48c:	80 91 b2 00 	lds	r24, 0x00B2
 490:	90 91 b3 00 	lds	r25, 0x00B3
 494:	90 93 bb 00 	sts	0x00BB, r25
 498:	80 93 ba 00 	sts	0x00BA, r24
			/*uart_puts("  white=");
			itoa(countW,str2,10);
			uart_puts(str2);*/
		    
		  
			counter=0;
 49c:	10 92 b3 00 	sts	0x00B3, r1
 4a0:	10 92 b2 00 	sts	0x00B2, r1
			flag=0;
 4a4:	10 92 af 00 	sts	0x00AF, r1
 4a8:	10 92 ae 00 	sts	0x00AE, r1
			// TIMSK = 0x00;
			 PORTC=PORTC^0x01;
			}*/
			//counter=0;
		//	_delay_ms(2);
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <itoa>:
 4ce:	fb 01       	movw	r30, r22
 4d0:	9f 01       	movw	r18, r30
 4d2:	e8 94       	clt
 4d4:	42 30       	cpi	r20, 0x02	; 2
 4d6:	c4 f0       	brlt	.+48     	; 0x508 <itoa+0x3a>
 4d8:	45 32       	cpi	r20, 0x25	; 37
 4da:	b4 f4       	brge	.+44     	; 0x508 <itoa+0x3a>
 4dc:	4a 30       	cpi	r20, 0x0A	; 10
 4de:	29 f4       	brne	.+10     	; 0x4ea <itoa+0x1c>
 4e0:	97 fb       	bst	r25, 7
 4e2:	1e f4       	brtc	.+6      	; 0x4ea <itoa+0x1c>
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	64 2f       	mov	r22, r20
 4ec:	77 27       	eor	r23, r23
 4ee:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 4f2:	80 5d       	subi	r24, 0xD0	; 208
 4f4:	8a 33       	cpi	r24, 0x3A	; 58
 4f6:	0c f0       	brlt	.+2      	; 0x4fa <itoa+0x2c>
 4f8:	89 5d       	subi	r24, 0xD9	; 217
 4fa:	81 93       	st	Z+, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	a1 f7       	brne	.-24     	; 0x4ea <itoa+0x1c>
 502:	16 f4       	brtc	.+4      	; 0x508 <itoa+0x3a>
 504:	5d e2       	ldi	r21, 0x2D	; 45
 506:	51 93       	st	Z+, r21
 508:	10 82       	st	Z, r1
 50a:	c9 01       	movw	r24, r18
 50c:	0c 94 88 02 	jmp	0x510	; 0x510 <strrev>

00000510 <strrev>:
 510:	dc 01       	movw	r26, r24
 512:	fc 01       	movw	r30, r24
 514:	67 2f       	mov	r22, r23
 516:	71 91       	ld	r23, Z+
 518:	77 23       	and	r23, r23
 51a:	e1 f7       	brne	.-8      	; 0x514 <strrev+0x4>
 51c:	32 97       	sbiw	r30, 0x02	; 2
 51e:	04 c0       	rjmp	.+8      	; 0x528 <strrev+0x18>
 520:	7c 91       	ld	r23, X
 522:	6d 93       	st	X+, r22
 524:	70 83       	st	Z, r23
 526:	62 91       	ld	r22, -Z
 528:	ae 17       	cp	r26, r30
 52a:	bf 07       	cpc	r27, r31
 52c:	c8 f3       	brcs	.-14     	; 0x520 <strrev+0x10>
 52e:	08 95       	ret

00000530 <__udivmodhi4>:
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	51 e1       	ldi	r21, 0x11	; 17
 536:	07 c0       	rjmp	.+14     	; 0x546 <__udivmodhi4_ep>

00000538 <__udivmodhi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	a6 17       	cp	r26, r22
 53e:	b7 07       	cpc	r27, r23
 540:	10 f0       	brcs	.+4      	; 0x546 <__udivmodhi4_ep>
 542:	a6 1b       	sub	r26, r22
 544:	b7 0b       	sbc	r27, r23

00000546 <__udivmodhi4_ep>:
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	5a 95       	dec	r21
 54c:	a9 f7       	brne	.-22     	; 0x538 <__udivmodhi4_loop>
 54e:	80 95       	com	r24
 550:	90 95       	com	r25
 552:	bc 01       	movw	r22, r24
 554:	cd 01       	movw	r24, r26
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
